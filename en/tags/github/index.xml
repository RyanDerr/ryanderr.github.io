<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on Ryan Derr&#39;s Blog</title>
    <link>http://www.ryanderr.dev/en/tags/github/</link>
    <description>Recent content in Github on Ryan Derr&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Oct 2024 16:21:27 -0500</lastBuildDate>
    <atom:link href="http://www.ryanderr.dev/en/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS Postgres RDS IAM Authentication</title>
      <link>http://www.ryanderr.dev/en/posts/aws-psql-rds-iam-auth/</link>
      <pubDate>Fri, 18 Oct 2024 16:21:27 -0500</pubDate>
      <guid>http://www.ryanderr.dev/en/posts/aws-psql-rds-iam-auth/</guid>
      <description>&lt;h1 id=&#34;securely-accessing-aws-postgresql-rds-instances-with-iam&#34;&gt;Securely Accessing AWS PostgreSQL RDS Instances With IAM&lt;/h1&gt;&#xA;&lt;p&gt;Relational database services have long been a cornerstone for storing and retrieving application data, dating back to the 1970s. However, managing credentials for applications, users, and administrators has always been a challenge due to the static nature of traditional credentials. With AWS RDS, we can address this issue by offering built-in IAM authentication for RDS PostgreSQL, enabling secure, short-lived access scoped to specific users or groups. Additionally, this approach enhances auditing capabilities by allowing detailed tracking of who accessed the database and when.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leveraging AWS Roles for Enhanced Security in GitHub Workflows</title>
      <link>http://www.ryanderr.dev/en/posts/aws-terraform-github-auth/</link>
      <pubDate>Fri, 03 May 2024 01:53:29 -0500</pubDate>
      <guid>http://www.ryanderr.dev/en/posts/aws-terraform-github-auth/</guid>
      <description>&lt;h1 id=&#34;moving-away-from-aws-access-keys&#34;&gt;Moving Away From AWS Access Keys&lt;/h1&gt;&#xA;&lt;p&gt;For a considerable period, I, like many others, relied on Terraform to provision my resources within AWS. Terraform, right out of the box, offers multiple authentication methods to access, provision, modify, or destroy resources, not to mention its support for remote state.&lt;/p&gt;&#xA;&lt;p&gt;In the beginning, I opted for the straightforward approach, using &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; for a pipeline user to handle the authentication. However, I soon encountered a significant challenge. I wanted to retain exclusive approval rights for changes to AWS via a GitHub environment, while my collaborators needed access to the AWS state to perform plans and ensure the proposed changes would function as expected.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GitHub Pages vs. Vercel: Choosing the Right Platform for Your Website</title>
      <link>http://www.ryanderr.dev/en/posts/gh-vs-vercel/</link>
      <pubDate>Sun, 16 Jul 2023 12:36:58 -0500</pubDate>
      <guid>http://www.ryanderr.dev/en/posts/gh-vs-vercel/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;In the world of web development, choosing the right platform to host your website is crucial. Two popular options are GitHub Pages and Vercel. Both platforms offer powerful features, but they have distinct differences that can impact your decision. In this blog post, we will explore when to use GitHub Pages and Vercel, along with their benefits and drawbacks, helping you make an informed choice for your web hosting needs.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
